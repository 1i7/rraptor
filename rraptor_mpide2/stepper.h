/**
 * stepper.h
 *
 * Библиотека управления шаговыми моторами, подключенными через интерфейс 
 * драйвера "step-dir".
 *
 * LGPL, 2014
 *
 * @author Антон Моисеев
 */


#ifndef STEPPER_H
#define STEPPER_H


/**
 * Структура - шаговый двигатель.
 */
typedef struct {
    /* Имя шагового мотора (один символ) */
    char name;
    
    /* Информация о подключение через драйвер Step-dir */
    
    /* Подача периодического импульса HIGH/LOW будет вращать мотор */
    int pin_pulse;
    /* Направление (1 - в одну сторону, 0 - в другую) */
    int pin_dir;
    /* Вкл (0)/выкл (1) мотор */
    int pin_en;
    
    /**
     * Инверсия направления: 
     * при dir_inv=1 и pin_dir=1 направление 0->1, 
     * при dir_inv=-1 и pin_dir=1 направление 1->0 
     */
    int dir_inv;
    
    /* Минимальная задержка между импульсами, микросекунды */
    int pulse_delay;
    
    /* Информация о движении координаты, подключенной к мотору */
    
    /* Расстояние, проходимое координатой за шаг, микрометры */
    float distance_per_step;
    
    /* Максимальное значение положения координаты, микрометры */
    float max_pos;
    /* Текущее положение координаты, микрометры */
    float current_pos;
} stepper;


/**
 * Инициализировать шаговый мотор необходимыми значениями.
 */
void init_stepper(stepper* smotor,  char name, 
        int pin_pulse, int pin_dir, int pin_en,
        int dir_inv, int pulse_delay,
        double distance_per_step, double max_pos);
        
/**
 * Подготовить мотор к запуску ограниченной серии шагов - задать нужное количество 
 * шагов и задержку между шагами для регулирования скорости (0 для максимальной скорости).
 * 
 * @param step_count количество шагов, знак задает направление вращения
 * @param step_delay задержка между двумя шагами, микросекунды (0 для максимальной скорости).
 */
void prepare_steps(stepper *smotor, int step_count, int step_delay);

/**
 * Подготовить мотор к запуску на вращение - задать направление и задержку между
 * шагами для регулирования скорости (0 для максимальной скорости).
 *
 * @param dir направление вращения: 1 - вращать вперед, -1 - назад.
 * @param step_delay задержка между двумя шагами, микросекунды (0 для максимальной скорости).
 * @param check_bounds - true: останавливать вращение при выходе за допустимые границы координаты (0, max_pos), 
 *                       false: не проверять границы (сбрасывать current_pos в 0 при каждом шаге).
 */
void prepare_whirl(stepper *smotor, int dir, int step_delay, bool check_bounds=true);

/**
 * Запустить цикл шагов на выполнение - запускаем таймер, обработчик прерываний
 * отрабатывать подготовленную программу.
 */
void start_stepper_cycle();

/**
 * Завершить цикл шагов - остановить таймер, обнулить список моторов.
 */
void finish_stepper_cycle();

/**
 * Текущий статус цикла:
 * true - в процессе выполнения,
 * false - ожидает.
 */
bool is_cycle_running();

////
// Математика

/**
 * @param sm - мотор на выбранной координате
 * @param dl - сдвиг по указанной оси, мм
 * @param spd - скорость перемещения, мм/с, 0 для максимальное скорости
 * 
 */
void prepare_line(stepper *sm, double dl, double spd=0);

/**
 * @param dl1 - сдвиг по оси 1, мм
 * @param dl2 - сдвиг по оси 2, мм
 * @param spd - скорость перемещения, мм/с, 0 для максимальное скорости
 */
void prepare_line_2d(stepper *sm1, stepper *sm2, double dl1, double dl2, double spd=0);

#endif // STEPPER_H

